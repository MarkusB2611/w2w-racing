// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Driver {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  accountId Int
  irating   Int?
  isStarter Boolean
  timezone  Timezone
}

type Timezone {
  name   String
  offset Int
}

model Event {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  name            String       @unique
  duration        Int
  trackId         String
  track           Track        @relation(fields: [trackId], references: [id])
  teams           Team[]
  greenFlagOffset Int
  simStartTime    DateTime
  sunrise         DateTime
  sunset          DateTime
  carClasses      carClasses[]
}

type carClasses {
  id   String
  text String
}

model Team {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  drivers      TeamDriver[]
  car          Car          @relation(fields: [carId], references: [id])
  startTimeGMT DateTime
  carId        String       @db.ObjectId
  Event        Event?       @relation(fields: [eventId], references: [id])
  eventId      String?      @db.ObjectId
}

type TeamDriver {
  driverId String @db.ObjectId
  laptime  Int
  fuelburn Float
}

model Track {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  length       Float
  pitstopTimes PitstopTime[]
  Event        Event[]
}

type PitstopTime {
  car  String
  time Int
}

model Car {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  name                     String
  fuelTankSize             Float
  tireChangeTime           Int
  tireChangeWhileRefueling Boolean
  class                    String
  Team                     Team[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
